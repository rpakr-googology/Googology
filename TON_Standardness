REM Input:TON Expression
REM Output:Standardness of TON Expression
input ""TONExp$
input ""Sys
print "TON Expression: "+TONExp$
REM Check Validity of Expression
if not(len(str$(Sys))=1 and str$(Sys)>="0" and str$(Sys)<="9") then Err=Err+1 endif
for CurrChar=1 to len(TONExp$)
  CurrChar$=mid$(TONExp$,CurrChar,1)
  if CurrChar$="C" then
    CCount=CCount+1
    dim CPos(CCount)
    CPos(CCount)=CurrChar
  endif
  if CurrChar$="(" then
    LParenCount=LParenCount+1
    dim LParenPos(LParenCount)
    LParenPos(LParenCount)=CurrChar
  endif
  if CurrChar$="," then
    CommaCount=CommaCount+1
    dim CommaPos(CommaCount)
    CommaPos(CommaCount)=CurrChar
  endif
  if CurrChar$=")" then
    RParenCount=RParenCount+1
    dim RParenPos(RParenCount)
    RParenPos(RParenCount)=CurrChar
  endif
  if CurrChar$="0" or CurrChar$="W" then
    ConstCount=ConstCount+1
    dim ConstPos(ConstCount)
    ConstPos(ConstCount)=CurrChar
  endif
next CurrChar
if CCount<>LParenCount then Err=Err+1 endif
if CCount<>CommaCount then Err=Err+1 endif
if CCount<>RParenCount then Err=Err+1 endif
if not CCount-ConstCount+1=0 then Err=Err+1 endif
if len(TONExp$)>CCount+LParenCount+CommaCount+RParenCount+ConstCount then Err=Err+1 endif
if instr(TONExp$,"W")>0 then
  if Sys=0 then Sys=2 endif
  print "System: "+str$(Sys)
else
  Sys=0
endif
if Err>0 then
  print "Expression Invalid"
else
  for CurrIndex=1 to CCount
    if not mid$(TONExp$,CPos(CurrIndex)+1,1)="(" then Err=Err+1 endif
  next CurrIndex
  for CurrIndex=1 to LParenCount
    if not(mid$(TONExp$,LParenPos(CurrIndex)+1,1)="0" or mid$(TONExp$,LParenPos(CurrIndex)+1,1)="W" or mid$(TONExp$,LParenPos(CurrIndex)+1,1)="C") then Err=Err+1 endif
  next CurrIndex
  for CurrIndex=1 to RParenCount
    if not(mid$(TONExp$,RParenPos(CurrIndex)+1,1)=")" or mid$(TONExp$,RParenPos(CurrIndex)+1,1)=",") then Err=Err+1 endif
  next CurrIndex
  for CurrIndex=1 to ConstCount
    if not(mid$(TONExp$,ConstPos(CurrIndex)+1,1)="," or mid$(TONExp$,ConstPos(CurrIndex)+1,1)=")") then Err=Err+1 endif
  next CurrIndex
  for CurrIndex=1 to CommaCount
    if not(mid$(TONExp$,CommaPos(CurrIndex)+1,1)="0" or mid$(TONExp$,CommaPos(CurrIndex)+1,1)="W" or mid$(TONExp$,CommaPos(CurrIndex)+1,1)="C") then Err=Err+1 endif
  next CurrIndex
  if Err>1 then
    print "Expression Invalid"
  else
    for CurrCIndex=1 to CCount
      NestLevel=0
      BaseLayerCommaCount=0
      for CurrChar=CPos(CurrCIndex) to len(TONExp$)
        CurrChar$=mid$(TONExp$,CurrChar,1)
        if CurrChar$="(" then NestLevel=NestLevel+1 endif
        if CurrChar$=")" then 
          NestLevel=NestLevel-1
          if NestLevel=0 then
            if not BaseLayerCommaCount=1 then Err=Err+1 endif
            break
          endif
        endif
        if CurrChar$="," and NestLevel=1 then BaseLayerCommaCount=BaseLayerCommaCount+1 endif
      next CurrChar
    next CurrCIndex
    if Err>1 then
      print "Expression Invalid"
    else
      REM List Subterms
      dim Subterm$((2*len(TONExp$)+3)/5)
      SubtermCount=1
      for CurrChar=1 to len(TONExp$)
        CurrChar$=mid$(TONExp$,CurrChar,1)
        if CurrChar$="0" or CurrChar$="W" then 
          Subterm$(SubtermCount)=CurrChar$
          SubtermCount=SubtermCount+1
        endif
        if CurrChar$="C" then
          NestLevel=0
          for CurrChar2=CurrChar to len(TONExp$)
            CurrChar2$=mid$(TONExp$,CurrChar2,1)
            if CurrChar2$="(" then NestLevel=NestLevel+1 endif
            if CurrChar2$=")" then
              NestLevel=NestLevel-1
              if NestLevel=0 then break endif
            endif
          next CurrChar2
          Subterm$(SubtermCount)=mid$(TONExp$,CurrChar,CurrChar2-CurrChar+1)
          SubtermCount=SubtermCount+1
        endif
      next CurrChar
      SubtermCount=SubtermCount-1
      dim SubtermCount(SubtermCount)
      for CurrSubterm=1 to SubtermCount
        SubtermCount(CurrSubterm)=(2*len(Subterm$(CurrSubterm))+3)/5
      next CurrSubterm
      print
      print "Subterms:"
      for CurrSubterm=1 to SubtermCount
        if SubtermCount(CurrSubterm)=1 then
          print Subterm$(CurrSubterm)+", 1 Subterm"
        else
          print Subterm$(CurrSubterm)+", "+str$(SubtermCount(CurrSubterm))+" Subterms"
        endif
      next CurrSubterm
      REM Check Standardness
      Nonstandard=0
      REM Rule 2
      print
      print "Checking Rule 2"
      for CurrSubterm=1 to SubtermCount
        CurrSubterm$=Subterm$(CurrSubterm)
        if left$(CurrSubterm$,1)="C" then
          NestLevel=0
          for CurrChar=1 to len(CurrSubterm$)
            CurrChar$=mid$(CurrSubterm$,CurrChar,1)
            if CurrChar$="(" then NestLevel=NestLevel+1 endif
            if CurrChar$=")" then NestLevel=NestLevel-1 endif
            if CurrChar$="," and NestLevel=1 then break endif
          next CurrChar
          if mid$(CurrSubterm$,CurrChar+1,1)="C" then
            NestLevel=0
            for CurrChar2=CurrChar+1 to len(CurrSubterm$)
              CurrChar2$=mid$(CurrSubterm$,CurrChar2,1)
              if CurrChar2$="(" then NestLevel=NestLevel+1 endif
              if CurrChar2$=")" then NestLevel=NestLevel-1 endif
              if CurrChar2$="," and NestLevel=1 then break endif
            next CurrChar2
            a$=mid$(CurrSubterm$,3,CurrChar-3)
            c$=mid$(CurrSubterm$,CurrChar+3,CurrChar2-CurrChar-3)
            print
            print "Subterm: "+CurrSubterm$
            print "a: "+a$
            print "c: "+c$
            REM Find Postfix Forms of a and c
            aPostfix$=""
            cPostfix$=""
            for CurrChar=len(a$) to 1 step -1
              CurrChar$=mid$(a$,CurrChar,1)
              if CurrChar$="C" or CurrChar$="0" or CurrChar$="W" then aPostfix$=aPostfix$+CurrChar$ endif
            next CurrChar
            for CurrChar=len(c$) to 1 step -1
              CurrChar$=mid$(c$,CurrChar,1)
              if CurrChar$="C" or CurrChar$="0" or CurrChar$="W" then cPostfix$=cPostfix$+CurrChar$ endif
            next CurrChar
            print "a Postfix: "+aPostfix$
            print "c Postfix: "+cPostfix$
            REM Compare a and c
            REM if a<=c then valid
            REM if a>c then invalid
            if not aPostfix$=cPostfix$ then
              aPostfix$=aPostfix$+" "
              cPostfix$=cPostfix$+" "
              for CurrChar=1 to min(len(aPostfix$),len(cPostfix$))
                aChar$=mid$(aPostfix$,CurrChar,1)
                cChar$=mid$(cPostfix$,CurrChar,1)
                if not aChar$=cChar$ then break endif
              next CurrChar
              REM " "<"C"<"0"<"W"
              if aChar$="W" or cChar$=" " or (aChar$="0" and cChar$="C") then
                Nonstandard=1
                print "a>c"
              endif
            endif
            if right$(aPostfix$,1)=" " then aPostfix$=left$(aPostfix$,len(aPostfix$)-1) endif
            if right$(cPostfix$,1)=" " then cPostfix$=left$(cPostfix$,len(cPostfix$)-1) endif
            if Nonstandard=0 then print "a<=c" endif
          endif
        endif
        if Nonstandard=1 then break endif
      next CurrSubterm
      print
      if Nonstandard=1 then
        print "Expression Nonstandard"
      else
        REM Rule 3
        print "Checking Rule 3"
        dim BFB(SubtermCount)
        for CurrSubterm=1 to SubtermCount
          CurrSubterm$=Subterm$(CurrSubterm)
          if left$(CurrSubterm$,1)="C" then
            print
            print "Subterm: "+CurrSubterm$
            print "Checking if "+Subterm$(CurrSubterm+1)+" is "+str$(Sys)+"-BFB from <"+CurrSubterm$+" or not."
            REM Reset BFB-ness
            for CurrSubterm2=1 to SubtermCount
              BFB(CurrSubterm2)=-1
            next CurrSubterm2
            REM Check 0-BFB-ness
            print
            print "0-BFB"
            REM Find Postfix Form of CurrSubterm$
            CurrSubtermPostfix$=""
            for CurrChar=len(CurrSubterm$) to 1 step -1
              CurrChar$=mid$(CurrSubterm$,CurrChar,1)
              if CurrChar$="C" or CurrChar$="0" or CurrChar$="W" then CurrSubtermPostfix$=CurrSubtermPostfix$+CurrChar$ endif
            next CurrChar
            BFBCount=0
            REM Loop: All Subterms of CurrSubterm$
            for CurrSubterm2=CurrSubterm to CurrSubterm+SubtermCount(CurrSubterm+1)
              CurrSubterm2$=Subterm$(CurrSubterm2)
              REM Find Postfix Form of CurrSubterm2$
              CurrSubterm2Postfix$=""
              for CurrChar=len(CurrSubterm2$) to 1 step -1
                CurrChar$=mid$(CurrSubterm2$,CurrChar,1)
                if CurrChar$="C" or CurrChar$="0" or CurrChar$="W" then CurrSubterm2Postfix$=CurrSubterm2Postfix$+CurrChar$ endif
              next CurrChar
              REM Compare CurrSubterm$ and CurrSubterm2$
              REM If CurrSubterm2$ is smaller it is 0-BFB from <CurrSuberm$
              if not CurrSubtermPostfix$=CurrSubterm2Postfix$ then
                CurrSubtermPostfix$=CurrSubtermPostfix$+" "
                CurrSubterm2Postfix$=CurrSubterm2Postfix$+" "
                for CurrChar=1 to min(len(CurrSubtermPostfix$),len(CurrSubterm2Postfix$))
                  CurrSubtermChar$=mid$(CurrSubtermPostfix$,CurrChar,1)
                  CurrSubterm2Char$=mid$(CurrSubterm2Postfix$,CurrChar,1)
                  if not CurrSubtermChar$=CurrSubterm2Char$ then break endif
                next CurrChar
                REM " "<"C"<"0"<"W"
                if CurrSubtermChar$="W" or CurrSubterm2Char$=" " or (CurrSubtermChar$="0" and CurrSubterm2Char$="C") then
                  BFB(CurrSubterm2)=0
                  BFBCount=BFBCount+1
                  print CurrSubterm2$
                endif
              endif
              if right$(CurrSubtermPostfix$,1)=" " then CurrSubtermPostfix$=left$(CurrSubtermPostfix$,len(CurrSubtermPostfix$)-1) endif
              if right$(CurrSubterm2Postfix$,1)=" " then CurrSubterm2Postfix$=left$(CurrSubterm2Postfix$,len(CurrSubterm2Postfix$)-1) endif
            next CurrSubterm2
            if BFBCount=0 then print "None" endif
            REM Check whether a is 0-BFB
            if BFB(CurrSubterm+1)=0 then
              print
              print Subterm$(CurrSubterm+1)+" is 0-BFB from <"+CurrSubterm$
              if Sys>0 then
                print Subterm$(CurrSubterm+1)+" is "+str$(Sys)+"-BFB from <"+CurrSubterm$
              endif
            else
              if Sys=0 then
                print Subterm$(CurrSubterm+1)+" is not 0-BFB from <"+CurrSubterm$
                print CurrSubterm$+" is nonstandard"
                Nonstandard=1
              else
                for k=1 to Sys
                  BFBCount=0
                  print
                  print str$(k)+"-BFB"
                  REM Check k-BFB-ness
                  for CurrSubterm2=CurrSubterm+1 to CurrSubterm+SubtermCount(CurrSubterm+1)
                    CurrSubterm2$=Subterm$(CurrSubterm2)
                    BFBCheck=0
                    REM Find Postfix Form of CurrSubterm2
                    CurrSubterm2Postfix$=""
                    for CurrChar=len(CurrSubterm2$) to 1 step -1
                      CurrChar$=mid$(CurrSubterm2$,CurrChar,1)
                      if CurrChar$="C" or CurrChar$="0" or CurrChar$="W" then CurrSubterm2Postfix$=CurrSubterm2Postfix$+CurrChar$ endif
                    next CurrChar
                    REM Check whether CurrSubterm2$ is k-BFB
                    for CurrSubterm3=CurrSubterm2 to CurrSubterm2+SubtermCount(CurrSubterm2)-1
                      REM Skip if CurrSubterm3$ is (<k)-BFB from <CurrSubterm
                      if BFB(CurrSubterm3)>-1 then CurrSubterm3=CurrSubterm3+SubtermCount(CurrSubterm3) endif
                      CurrSubterm3$=Subterm$(CurrSubterm3)
                      REM Find Postfix Form of CurrSubterm3
                      CurrSubterm3Postfix$=""
                      for CurrChar=len(CurrSubterm3$) to 1 step -1
                        CurrChar$=mid$(CurrSubterm3$,CurrChar,1)
                        if CurrChar$="C" or CurrChar$="0" or CurrChar$="W" then CurrSubterm3Postfix$=CurrSubterm3Postfix$+CurrChar$ endif
                      next CurrChar
                      REM Compare CurrSubterm2$ and CurrSubterm3$
                      REM If CurrSubterm2$<CurrSubterm3 then CurrSubterm2$ is not k-BFB
                      if not CurrSubterm2Postfix$=CurrSubterm3Postfix$ then
                        CurrSubterm2Postfix$=CurrSubterm2Postfix$+" "
                        CurrSubterm3Postfix$=CurrSubterm3Postfix$+" "
                        for CurrChar=1 to min(len(CurrSubterm2Postfix$),len(CurrSubterm3Postfix$))
                          CurrSubterm2Char$=mid$(CurrSubterm2Postfix$,CurrChar,1)
                          CurrSubterm3Char$=mid$(CurrSubterm3Postfix$,CurrChar,1)
                          if not CurrSubterm2Char$=CurrSubterm3Char$ then break endif
                        next CurrChar
                        REM " "<"C"<"0"<"W"
                        if CurrSubterm3Char$="W" or CurrSubterm2Char$=" " or (CurrSubterm3Char$="0" and CurrSubterm2Char$="C") then
                          BFBCheck=1
                        endif
                      endif
                      if right$(CurrSubterm2Postfix$,1)=" " then CurrSubterm2Postfix$=left$(CurrSubterm2Postfix$,len(CurrSubterm2Postfix$)-1) endif
                      if right$(CurrSubterm3Postfix$,1)=" " then CurrSubterm3Postfix$=left$(CurrSubterm3Postfix$,len(CurrSubterm3Postfix$)-1) endif
                      if BFBCheck=1 then break endif
                    next CurrSubterm3
                    if BFBCheck=0 and BFB(CurrSubterm2)=-1 then
                      BFB(CurrSubterm2)=k
                      BFBCount=BFBCount+1
                      print CurrSubterm2$
                    endif
                  next CurrSubterm2
                  if BFB(CurrSubterm+1)=k then break endif
                  if BFBCount=0 then print "None" endif
                next k
                if BFB(CurrSubterm+1)<0 then Nonstandard=1 endif
              endif
            endif
          endif
          if Nonstandard=1 then break endif
        next CurrSubterm
        print
        if Nonstandard=1 then print "Expression Nonstandard" else print "Expression Standard" endif 
      endif
    endif
  endif
endif
