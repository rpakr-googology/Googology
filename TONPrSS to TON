REM Input:TONPrSS of ω^α
REM Output:TON of α
dim PriSeq(999),PairSeqA(999),PairSeqB(999),Parent(999),CommaPos(99),Substring$(99)
input ""Seq$
REM Sequence Vality Check
CurrTerm=1
for CurrChar=1 to len(Seq$)
  Char$=mid$(Seq$,CurrChar,1)
  if Char$="," then CurrTerm=CurrTerm+1 endif
  if Char$>="0" and Char$<="9" then 
    PriSeq(CurrTerm)=PriSeq(CurrTerm)*10+val(Char$)
  endif
next CurrChar
Length=CurrTerm
if PriSeq(1)>2 or PriSeq(1)<1 then Err=1 endif
for Term=2 to Length
  if PriSeq(Term)-PriSeq(Term-1)>2 or PriSeq(Term)<=PriSeq(1) then Err=1 endif
next Term
if Err=1 then print("Sequence Invalid") endif
if Err=0 then
  REM Output Sequence
  for Term=1 to Length
    Output$=Output$+str$(PriSeq(Term))
    Output$=Output$+","
  next Term
  print("Sequence: "+left$(Output$,len(Output$)-1))
  REM Convert to PSS
  for Term=2 to Length
    for Term2=Term to 1 step -1
      if PriSeq(Term2)<PriSeq(Term) then 
        Parent(Term)=Term2
        break
      endif
    next Term2
  next Term
  PairSeqA(1)=1
  PairSeqB(1)=PriSeq(1)
  for Term=2 to Length
    PairSeqA(Term)=PairSeqA(Parent(Term))+1
    PairSeqB(Term)=PriSeq(Term)-PriSeq(Parent(Term))
  next Term
  REM Output PSS
  Output$=""
  for Term=1 to Length
    Output$=Output$+"("+str$(PairSeqA(Term)-1)+","+str$(PairSeqB(Term)-1)+")"
  next Term
  print ("Pair Sequence: "+Output$)
  REM Convert to 0,D,E,Z
  if PairSeqB(1)=1 then DE$="D(" endif
  if PairSeqB(1)=2 then DE$="E(" endif
  for Term=2 to Length
    Distance=Term-Parent(Term)
    Difference=PairSeqA(Term-1)-PairSeqA(Term)
    if Distance=1 and PairSeqB(Term)=1 then DE$=DE$+"D(" endif
    if Distance=1 and PairSeqB(Term)=2 then DE$=DE$+"E(" endif
    if Distance>1 then 
      for ParenCount=1 to Difference+1
        DE$=DE$+")"
      next ParenCount
      if PairSeqB(Term)=1 then DE$=DE$+",D(" endif
      if PairSeqB(Term)=2 then DE$=DE$+",E(" endif
    endif
  next Term
  for ParenCount=1 to PairSeqA(Length)
    DE$=DE$+")"
  next ParenCount
  for CurrChar=1 to len(DE$)
    String$=mid$(DE$,CurrChar,3)
    if String$="D()" then mid$(DE$,CurrChar,3)="0  " endif
    if String$="E()" then mid$(DE$,CurrChar,3)="Z  " endif
  next CurrChar
  Output$=""
  for CurrChar=1 to len(DE$)
    Char$=mid$(DE$,CurrChar,1)
    if not Char$=" " then Output$=Output$+Char$ endif
  next CurrChar
  DE$=Output$
  print ("0,D,E,Z Expression: "+Output$)
  REM Convert to Semicolons
  for CurrChar=1 to len(DE$)
    Char$=mid$(DE$,CurrChar,1)
    if Char$="D" or Char$="E" then
      Level=0
      for CurrChar2=CurrChar to len(DE$)
        Char2$=mid$(DE$,CurrChar2,1)
        if Char2$="(" then Level=Level+1 endif
        if Char2$=")" or Char2$="a" or Char2$="b" then 
          Level=Level-1
          if Level=0 then break endif
        endif
      next CurrChar2
      if Char$="D" then mid$(DE$,CurrChar2,1)="a" else mid$(DE$,CurrChar2,1)="b" endif
    endif
  next CurrChar
  Output$=""
  for CurrChar=1 to len(DE$)
    Char$=mid$(DE$,CurrChar,1)
    if not(Char$="a" or Char$="b" or Char$="D" or Char$="E") then Output$=Output$+Char$ endif
    if Char$="a" then Output$=Output$+";0)" endif
    if Char$="b" then Output$=Output$+";Z)" endif
    if Char$="D" then Output$=Output$+"C" endif
    if Char$="E" then Output$=Output$+"C" endif
  next CurrChar
  SC$=Output$
  print ("Semicolons: "+Output$)
  REM Convert to TON
  for CurrChar=1 to len(SC$)
    Char$=mid$(SC$,CurrChar,1)
    if Char$="," then Exp$=Exp$+",   " else Exp$=Exp$+Char$ endif
  next CurrChar
  SC$=Exp$
  REM Search left for C
  for CurrChar=len(SC$) to 1 step -1
    Char$=mid$(SC$,CurrChar,1)
    if Char$="C" then
      REM Reset Comma Positions
      for Index=1 to 99
        CommaPos(Index)=0
      next Index
      CommaCount=0
      REM Search right for commas and corresponding parenthesis
      Level=0
      for CurrChar2=CurrChar to len(SC$)
        Char2$=mid$(SC$,CurrChar2,1)
        if Char2$="," and Level=1 then
          CommaCount=CommaCount+1
          CommaPos(CommaCount)=CurrChar2
        endif
        if Char2$="(" then Level=Level+1 endif
        if Char2$=")" then 
          Level=Level-1
          if Level=0 then break endif
        endif
      next CurrChar2
      CPos=CurrChar
      SemicolonPos=CurrChar2-2
      RParenPos=CurrChar2
      if CommaCount=0 then mid$(SC$,SemicolonPos,1)="," else
        REM Reset Substrings
        for Index=1 to 99
          Substring$(Index)=""
        next Index
        REM Extract Substrings
        Substring$(1)=mid$(SC$,CPos+2,CommaPos(1)-CPos-2)
        for CommaIndex=2 to CommaCount
          Substring$(CommaIndex)=mid$(SC$,CommaPos(CommaIndex-1)+1,CommaPos(CommaIndex)-CommaPos(CommaIndex-1)-1)
        next CommaIndex
        Substring$(CommaCount+1)=mid$(SC$,CommaPos(CommaCount)+1,SemicolonPos-CommaPos(CommaCount)-1)
        SubstringCount=CommaCount+1
        Second$=mid$(SC$,RParenPos-1,1)
        REM Reset Replacement String
        Replacement$=""
        REM Calculate Replacement
        for SubstringIndex=1 to SubstringCount
          Replacement$=Replacement$+"C("+Substring$(SubstringCount-SubstringIndex+1)+","
        next SubstringIndex
        Replacement$=Replacement$+Second$
        for ParenCount=1 to SubstringCount
          Replacement$=Replacement$+")"
        next ParenCount
        Subst$=""
        for CurrChar2=1 to len(Replacement$)
          Char2$=mid$(Replacement$,CurrChar2,1)
          if not Char2$=" " then Subst$=Subst$+Char2$ endif
        next CurrChar2
        REM Replacement
        mid$(SC$,CPos,RParenPos-CPos+1)=Subst$
      endif
    endif
  next CurrChar
  print("TON: "+SC$)
  REM Convert to Postfix
  Output$=""
  for CurrChar=len(SC$) to 1 step -1
    Char$=mid$(SC$,CurrChar,1)
    if Char$="0" or Char$="Z" or Char$="C" then Output$=Output$+Char$ endif
  next CurrChar
  print("Postfix: "+Output$)
endif
