//Input: Primary pseudo pritimive sequence system
//Output: Expansion
//Primary pseudo pritimive sequence system is a notation by googologist 108Hassium
//Definition: https://twitter.com/1Hassium/status/1207676967857934337
#include <bits/stdc++.h>
using namespace std;
int f(int n) {
    return n;
}
int main() {
	string str;
	cin >> str;
	vector<int> seq;
	//Initializing sequence
	seq.clear();
	//Reading input
	char c = str[1];
	bool valid = true;
	if (str.front() != '('){
		valid = false;
	}
	if (str[1] == '('){
	    valid = false;
	}
	if (str.back() != ']'){
		valid = false;
	}
	int k = 0;
	int cchar;
	for (cchar = 1; cchar <= str.size() - 1 && (str[cchar] != ')'); cchar++){
		c = str[cchar];
		if (isdigit(c)){
			if (k == seq.size()){
				seq.push_back(c - '0');
			} else {
				seq[seq.size() - 1] = seq.back() * 10 + (c - '0');
			}
		} else if (c == ','){
			k++;
			if (!isdigit(str[cchar + 1])){
				valid = false;
			}
			if (!isdigit(str[cchar - 1])){
				valid = false;
			}
		} else {
			valid = false;
		}
	}
	if (cchar >= str.size() - 2){
		valid = false;
	}
	int n;
	if (str[cchar + 1] != '['){
		valid = false;
	} else {
		for (cchar = cchar + 2; cchar <= str.size() - 2; cchar++){
			c = str[cchar];
			if (isdigit(c)){
				if (str[cchar - 1] == '['){
					n = c - '0';
				} else {
					n = n * 10 + (c - '0');
				}
			} else {
				valid = false;
			}
		}
	}
	if (valid){
		if (k == 0){
			//Base case
			cout << f(n) << endl;
		} else if (seq.back() == 0){
			//Successor case
			cout << '(';
			for (int i = 0; i <= k - 2; i++){
				cout << seq[i] << ',';
			}
			cout << seq[k - 1] << ')';
			cout << '[' << f(n) << ']' << endl;
		} else {
			//Limit case
			//BR search
			int r = k;
			while (r > 0){
			    if (seq[r] == 0 && seq[r - 1] < seq[k]) break;
			    r--;
			}
			int length = k;
			//Constant case
			seq.pop_back();
			length--;
			for (int rept = 0; rept < f(n); rept++){
				for (int i = r; i < k; i++){
					seq.push_back(seq[i]);
					length++;
				}
			}
			//Output
			cout << '(';
			for (int i = 0; i < length ; i++){
				cout << seq[i] << ',';
			}
			cout << seq[length] << ')';
			cout << '[' << f(n) << ']' << endl;
		}
	} else {
		cout << "Sequence invalid" << endl;
	}
	return 0;
}
