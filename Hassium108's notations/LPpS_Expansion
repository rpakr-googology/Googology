REM Input:LPpS Sequence
REM Output:Expansion of LPpS Sequence
REM LPpS is a notation by Googologist 108Hassium
input ""Seq$
REM Sequence Validity Check
CurrTerm=1
for CurrChar=1 to len(Seq$)
  dim PriSeq(CurrTerm)
  Char$=mid$(Seq$,CurrChar,1)
  if Char$="," then CurrTerm=CurrTerm+1 endif
  if Char$>="0" and Char$<="9" then 
    PriSeq(CurrTerm)=PriSeq(CurrTerm)*10+val(Char$)
  endif
next CurrChar
Length=CurrTerm
if PriSeq(1)>0 then 
  print("Sequence Invalid")
else
  REM Output Sequence
  for Term=1 to Length
    Output$=Output$+str$(PriSeq(Term))
    Output$=Output$+","
  next Term
  print("Sequence: "+left$(Output$,len(Output$)-1))
  if PriSeq(Length)=0 then
    REM Successor Case
    print("Successor Case")
    Output$=""
    for Term=1 to Length-1
      Output$=Output$+str$(PriSeq(Term))
      Output$=Output$+","
    next Term
    print("Expansion: "+left$(Output$,len(Output$)-1))
  else
    REM Limit Case
    print("Limit Case")
    REM Search Bad Root
    for BR=Length-1 to 1 step -1
      if PriSeq(BR)<PriSeq(Length) and PriSeq(BR)<=PriSeq(BR-1) then break endif
    next BR
    print("BR="+str$(BR))
    BadLength=Length-BR
    REM Calculate Delta
    Delta=PriSeq(Length)-PriSeq(BR)-1
    print("Delta="+str$(Delta))
    REM Delete Last Term
    PriSeq(Length)=0
    Length=Length-1
    REM Expansion
    print("Expansion:")
    for Repetition=0 to 4
      Output$=""
      for Term=1 to Length
        Output$=Output$+str$(PriSeq(Term))
        Output$=Output$+","
      next Term
      print(left$(Output$,len(Output$)-1))
      dim PriSeq(Length+BadLength)
      for Term=1 to BadLength
        PriSeq(Length+Term)=PriSeq(BR+Term-1)+(Repetition+1)*Delta
      next Term
      Length=Length+BadLength
    next Repetition
  endif
endif
