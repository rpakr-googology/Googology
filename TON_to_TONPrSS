REM Input:TON of α
REM Output:TONPrSS of ω^α
input ""TONExp$
print ("TON Expression: "+TONExp$)
REM Check Validity of Expression
for CurrChar=1 to len(TONExp$)
  CurrChar$=mid$(TONExp$,CurrChar,1)
  if CurrChar$="C" then
    CCount=CCount+1
    dim CPos(CCount)
    CPos(CCount)=CurrChar
  endif
  if CurrChar$="(" then
    LParenCount=LParenCount+1
    dim LParenPos(LParenCount)
    LParenPos(LParenCount)=CurrChar
  endif
  if CurrChar$="," then
    CommaCount=CommaCount+1
    dim CommaPos(CommaCount)
    CommaPos(CommaCount)=CurrChar
  endif
  if CurrChar$=")" then
    RParenCount=RParenCount+1
    dim RParenPos(RParenCount)
    RParenPos(RParenCount)=CurrChar
  endif
  if CurrChar$="0" or CurrChar$="Z" then
    ConstCount=ConstCount+1
    dim ConstPos(ConstCount)
    ConstPos(ConstCount)=CurrChar
  endif
next CurrChar
if CCount<>LParenCount then Err=Err+1 endif
if CCount<>CommaCount then Err=Err+1 endif
if CCount<>RParenCount then Err=Err+1 endif
if not CCount-ConstCount+1=0 then Err=Err+1 endif
if len(TONExp$)>CCount+LParenCount+CommaCount+RParenCount+ConstCount then Err=Err+1 endif
if Err>0 then
  print "Expression Invalid"
else
  for CurrIndex=1 to CCount
    if not mid$(TONExp$,CPos(CurrIndex)+1,1)="(" then Err=Err+1 endif
  next CurrIndex
  for CurrIndex=1 to LParenCount
    if not(mid$(TONExp$,LParenPos(CurrIndex)+1,1)="0" or mid$(TONExp$,LParenPos(CurrIndex)+1,1)="Z" or mid$(TONExp$,LParenPos(CurrIndex)+1,1)="C") then Err=Err+1 endif
  next CurrIndex
  for CurrIndex=1 to RParenCount
    if not(mid$(TONExp$,RParenPos(CurrIndex)+1,1)=")" or mid$(TONExp$,RParenPos(CurrIndex)+1,1)=",") then Err=Err+1 endif
  next CurrIndex
  for CurrIndex=1 to ConstCount
    if not(mid$(TONExp$,ConstPos(CurrIndex)+1,1)="," or mid$(TONExp$,ConstPos(CurrIndex)+1,1)=")") then Err=Err+1 endif
  next CurrIndex
  for CurrIndex=1 to CommaCount
    if not(mid$(TONExp$,CommaPos(CurrIndex)+1,1)="0" or mid$(TONExp$,CommaPos(CurrIndex)+1,1)="Z" or mid$(TONExp$,CommaPos(CurrIndex)+1,1)="C") then Err=Err+1 endif
  next CurrIndex
  if Err>1 then
    print "Expression Invalid"
  else
    for CurrCIndex=1 to CCount
      NestLevel=0
      BaseLayerCommaCount=0
      for CurrChar=CPos(CurrCIndex) to len(TONExp$)
        if mid$(TONExp$,CurrChar,1)="(" then NestLevel=NestLevel+1 endif
        if mid$(TONExp$,CurrChar,1)=")" then 
          NestLevel=NestLevel-1
          if NestLevel=0 then
            if not BaseLayerCommaCount=1 then Err=Err+1 endif
            break
          endif
        endif
        if mid$(TONExp$,CurrChar,1)="," and NestLevel=1 then BaseLayerCommaCount=BaseLayerCommaCount+1 endif
      next CurrChar
    next CurrCIndex
    if Err>1 then
      print "Expression Invalid"
    else
      print "Expression Valid"
      REM Convert to Semicolons
      for CurrChar=1 to len(TONExp$)
        if mid$(TONExp$,CurrChar,1)="C" then
          REM Find Corresponding Comma
          CPos=CurrChar
          NestLevel=0
          for CurrChar2=CurrChar to len(TONExp$)
            if mid$(TONExp$,CurrChar2,1)="(" then NestLevel=NestLevel+1 endif
            if mid$(TONExp$,CurrChar2,1)="," and NestLevel=1 then CommaPos=CurrChar2 endif
            if mid$(TONExp$,CurrChar2,1)=")" then
              NestLevel=NestLevel-1
              if NestLevel=0 then break endif
            endif
          next CurrChar2
          if mid$(TONExp$,CommaPos+1,1)="0" or mid$(TONExp$,CommaPos+1,1)="Z" then
            mid$(TONExp$,CommaPos,1)=";"
          else
            REM Extract Substrings
            SubstringIndex=1
            dim Substring$(SubstringIndex)
            Substring$(1)=mid$(TONExp$,CPos+2,CommaPos-CPos-2)
            for SubstringIndex=2 to len(TONExp$)
              CPos=CommaPos+1
              NestLevel=0
              for CurrChar2=CPos to len(TONExp$)
                if mid$(TONExp$,CurrChar2,1)="(" then NestLevel=NestLevel+1 endif
                if mid$(TONExp$,CurrChar2,1)="," and NestLevel=1 then CommaPos=CurrChar2 endif
                if mid$(TONExp$,CurrChar2,1)=")" then
                  NestLevel=NestLevel-1
                  if NestLevel=0 then break endif
                endif
              next CurrChar2
              dim Substring$(SubstringIndex)
              Substring$(SubstringIndex)=mid$(TONExp$,CPos+2,CommaPos-CPos-2)
              if mid$(TONExp$,CommaPos+1,1)="0" or mid$(TONExp$,CommaPos+1,1)="Z" then
                Second$=mid$(TONExp$,CommaPos+1,1)
                break
              endif
            next SubstringIndex
            REM Compute Replacement String
            Subst$="C("
            dim Substring$(SubstringIndex)
            for CurrSubstring=SubstringIndex to 1 step -1
              Subst$=Subst$+Substring$(CurrSubstring)+","
            next CurrSubstring
            right$(Subst$,1)=";"
            Subst$=Subst$+Second$+")"
            for SpaceCount=1 to 3*SubstringIndex-3
              Subst$=Subst$+" "
            next SpaceCount
            REM Replacement
            mid$(TONExp$,CurrChar,len(Subst$))=Subst$
          endif
        endif
      next CurrChar
      Output$=""
      for CurrChar=1 to len(TONExp$)
        if not mid$(TONExp$,CurrChar,1)=" " then Output$=Output$+mid$(TONExp$,CurrChar,1) endif
      next CurrChar
      print("Semicolons: "+Output$)
      TONExp$=Output$
      REM Convert to 0,D,E,Z
      for CurrChar=1 to len(TONExp$)
        if mid$(TONExp$,CurrChar,1)="C" then
          NestLevel=0
          for CurrChar2=CurrChar to len(TONExp$)
            if mid$(TONExp$,CurrChar2,1)="(" then NestLevel=NestLevel+1 endif
            if mid$(TONExp$,CurrChar2,1)=")" then
              NestLevel=NestLevel-1
              if NestLevel=0 then break endif
            endif
          next CurrChar2
          if mid$(TONExp$,CurrChar2-1,1)="0" then
            mid$(TONExp$,CurrChar,1)="D"
          else
            mid$(TONExp$,CurrChar,1)="E"
          endif
          mid$(TONExp$,CurrChar2-2,2)="  "
        endif
      next CurrChar
      Output$=""
      for CurrChar=1 to len(TONExp$)
        if not mid$(TONExp$,CurrChar,1)=" " then Output$=Output$+mid$(TONExp$,CurrChar,1) endif
      next CurrChar
      print("0,D,E,Z Expression: "+Output$)
      TONExp$=Output$
      REM Convert to PSS
      DE$=""
      for CurrChar=1 to len(TONExp$)
        if not(mid$(TONExp$,CurrChar,1)="0" or mid$(TONExp$,CurrChar,1)="Z") then DE$=DE$+mid$(TONExp$,CurrChar,1) endif
        if mid$(TONExp$,CurrChar,1)="0" then DE$=DE$+"D()" endif
        if mid$(TONExp$,CurrChar,1)="Z" then DE$=DE$+"E()" endif
      next CurrChar
      for CurrChar=1 to len(DE$)
        if mid$(DE$,CurrChar,1)="D" or mid$(DE$,CurrChar,1)="E" then Length=Length+1 endif
      next CurrChar
      dim PairSeqA(Length),PairSeqB(Length),PriSeq(Length)
      CurrHeight=0
      Term=1
      for CurrChar=1 to len(DE$)
        if mid$(DE$,CurrChar,1)="D" then
          PairSeqA(Term)=CurrHeight
          PairSeqB(Term)=0
          Term=Term+1
        endif
        if mid$(DE$,CurrChar,1)="E" then
          PairSeqA(Term)=CurrHeight
          PairSeqB(Term)=1
          Term=Term+1
        endif
        if mid$(DE$,CurrChar,1)="(" then CurrHeight=CurrHeight+1 endif
        if mid$(DE$,CurrChar,1)=")" then CurrHeight=CurrHeight-1 endif
      next CurrChar
      Output$=""
      for Term=1 to Length
        Output$=Output$+"("+str$(PairSeqA(Term))+","+str$(PairSeqB(Term))+")"
      next Term
      print(DE$)
      print("Pair Sequence: "+Output$)
    endif
  endif
endif
